/*

// 22:07:03 ------> Dynamic SVG On-Chain NFT Part III

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

/**
 * @dev First -- a mint function
 * Second -- a way to store our SVG information somewhere
 * Third -- Some logic to say "Show X Images" or "Show Y Image"
 */

contract DynamicSvgNft is ERC721 {

    uint256 private s_tokenCounter;
    /*
    *string memory lowSvg, string memory highSvg sill be where we will store our happy and frowny face images
    */
    constructor(string memory lowSvg, string memory highSvg) ERC721("Dynamic SVG NFT", "DSN") {
        s_tokenCounter = 0;
    }

    function mintNft() public  {
        _safeMint(msg.sender, s_tokenCounter);
        s_tokenCounter = s_tokenCounter + 1;
    }
}

*/

/*

// 22:10:19 ------> Dynamic SVG On-Chain NFT Part IV ----- Base64 Encoding 

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "base64-sol/base64.sol";

/**
 * @dev First -- a mint function
 * Second -- a way to store our SVG information somewhere
 * Third -- Some logic to say "Show X Images" or "Show Y Image"
 */

contract DynamicSvgNft is ERC721 {

    uint256 private s_tokenCounter;

    string private i_lowImageURI;
    string private i_highImageURI;
    string private constant base64EncodedSvgPrefix = "data:image/svg+xml;base64,";

    constructor(string memory lowSvg, string memory highSvg) ERC721("Dynamic SVG NFT", "DSN") {
        s_tokenCounter = 0;
    }

    // A function to convert our SVG to Base64 Encoding
    function svgToImageURI(string memory svg) public pure returns (string memory) {
        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(svg))));
        return string(abi.encodePacked(base64EncodedSvgPrefix, svgBase64Encoded));
    }

    function mintNft() public  {
        _safeMint(msg.sender, s_tokenCounter);
        s_tokenCounter = s_tokenCounter + 1;
    }
}

*/

/*

// 23:01:10 ------> Dynamic SVG On-Chain NFT Part V ----- Creating an NFT Token URI on-chain

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "base64-sol/base64.sol";

/**
 * @dev First -- a mint function
 * Second -- a way to store our SVG information somewhere
 * Third -- Some logic to say "Show X Images" or "Show Y Image"
 */

contract DynamicSvgNft is ERC721 {
    uint256 private s_tokenCounter;

    string private i_lowImageURI;
    string private i_highImageURI;
    string private constant base64EncodedSvgPrefix = "data:image/svg+xml;base64,";

    constructor(string memory lowSvg, string memory highSvg) ERC721("Dynamic SVG NFT", "DSN") {
        s_tokenCounter = 0;
    }

    // A function to convert our SVG to Base64 Encoding
    function svgToImageURI(string memory svg) public pure returns (string memory) {
        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(svg))));
        return string(abi.encodePacked(base64EncodedSvgPrefix, svgBase64Encoded));
    }

    function mintNft() public {
        _safeMint(msg.sender, s_tokenCounter);
        s_tokenCounter = s_tokenCounter + 1;
    }

    function _baseURI() internal pure override returns (string memory) {
        return "data:application/json;base64";
    }

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "URI Query for nonexistence token");
        string memory imageURI = "hi";

        // prefix for SVG Images ---> data:image/svg+xml;base64,
        // prefix for Base64 JSON --> data:application/json;base64,

        return
            string(
                abi.encodePacked(
                    _baseURI(),
                    Base64.encode(
                        bytes(
                            abi.encodePacked(
                                '{"name":"',
                                name(),
                                '", "description":"An NFT that changes based on the Chainlink Feed", ',
                                '"attributes": [{"trait_type": "coolness", "value": 100}], "image":"',
                                imageURI,
                                '"}'
                            )
                        )
                    )
                )
            );
    }
}


*/
